//? 73. Использование функций
//* - Функции которые мы передаем в компонент могут быть не только обработчиками событий - eventListener
//* - Можно передавать функции которые получают данные, для получения промиса
//* - Функция может инкапсулировать полученные данных (тогда компонент становиться независимым от источника данных)

//? 74. Render-функции
//* - Паттерн React - в компонент передается функция, которая рендерит часть компонента( или весь компонент)
// - renderItem={(item) => item.name}
//* - Такая функция обычно возвращает строку или React элементы
// - renderItem={(item) => <span>{item.name} <button>!</button></span>}

//? 75. Свойства-элементы
//* - В качестве значения свойства можно передавать React элемент
// <Card title={<h1>Hello</h1>}
//* - Так же можно создавать элементы контейнеры

//? 76. Children
//* - Компоненту можно передать одно из свойств, поместив его тело в элемент
//* - Это свойство доступно через props.children
//* - Поддерживает любые типы данных: элементы, функции, обьекты и примитивы

//? 77. Практика - рефакторинг компонента
//* - Вынесли детали получения данных и адреса картинки в отдельные функции
//* - В таком виде компонент может работать с разными объектами
//* - Остально решить, как сконфегурировать, какие именно данные будет отображать компонент

//? 78. Работа с props.children
//* - Компонент может решать, как именно использовать children
//* - Функция React.Children.map() упрощает обработку props.children
//* - Child элементы можно заменять, оборачивать в другие компоненты или скрывать(если вернуть null)
// React.Children.map(child => изменяем child)

//? 79. Клонирование элементов
//* - Реакт элементы нельзя изменять (они считатаются immutable)
//* - НО, можно создавать модифицированные копии при помощи React.cloneElement(что_копируем, { новый ключ: новое значение })
//* - К примеру, элементам можно добавлять новые свойства

//? 80. Компоненты высшего порядка (HOC)
//* - Функция которая возвращает компонент, который оборачивает основной компонент
//* - Компонент-обертка - верет на себя некоторые обязанности / логику о которых не нужно заботить внутреннему компоненту
//* - Компонент/функция-обертка - содержит переиспользумую логику которую хотелось бы скрыть или избежать ее постоянного копирования 

//? 81. Рефакторинг компонентов
//* - Обратная сторона "гибкости" компонентов это громозкая конфигурация
//* - Код будет более читабельным если вынести детали конфигурации в отдельные компоненты
//* - Для этого можно использовать НОС или просто написать компонент-обертку вручную

//? 
//* - 
//* - 
//* - 

//? 
//* - 
//* - 
//* - 

//? 
//* - 
//* - 
//* - 