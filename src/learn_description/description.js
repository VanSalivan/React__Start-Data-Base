//? Как работает FETCH
//* - Чтобы получть данные с сервера, нужно два вызова(каждый вернет "Promise")
//* response = await fetch(url)
//* body = await response.json()
//* - Кроме .json() есть другие функции для других типов ответа:
//* arrayBuffer(), blob(), text(), fromData()

//? Обработка ошибок в FETCH
//* - FETCH отклоняет "reject()"Promise, только если произошла ошибка сети (сервер недоступен)
//* - Чтобы проверить код результата, можно использовать "result.status"
//* - "result.ok" содержит true, если "result.status" содержит один из OK-статусов (200-299)

//? API-Клиент
//* - Код который работает с сетью лучше изолировать в отдельный класс-сервис
//* - Компоненты не должны знать откуда именно беруться данные 
//* - Такой подход упростит тестирование и поддержку кода, который работает с API

//? Компоненты
//* - Начинать разработку React приложения удобно с создания разметки компонентов
//* - Такие компоненты ничего не делают просто отображают данные 
//* - В финальной версии приложения "разбивка" на компоненты может измениться, 
//*   но такой шаблон на React - хорошее начало

//? 
//* - 
//* - 
//* - 