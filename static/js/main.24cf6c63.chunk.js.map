{"version":3,"sources":["components/header/index.js","components/header/header.js","components/item-details/item-details.js","components/spiner/spiner.js","components/error-indicator/error-indicator.js","components/error-indicator/index.js","components/hoc-helpers/with-data.js","components/swapi-service-context/index.js","components/hoc-helpers/with-swapi-service.js","components/sw-components/person-details.js","components/sw-components/planet-details.js","components/sw-components/starship-details.js","components/item-list/index.js","components/item-list/item-list.js","services/swapi-service.js","components/sw-components/item-lists.js","components/row/index.js","components/row/row.js","components/pages/people-page.js","components/pages/planets-page.js","components/pages/starship-page.js","components/random-planet/random-planet.js","components/random-planet/index.js","components/app-wrap/index.js","components/app-wrap/app-wrap.js","index.js"],"names":["Header","className","to","Record","props","item","field","label","ItemDetails","state","itemIdBody","image","this","updateItemBody","prevProps","itemId","getData","getImageUrl","then","newItem","setState","src","alt","name","React","Children","map","children","child","cloneElement","Component","Spiner","ErrorIndicator","withDataHOC","ComponentView","getDataFunction","dataHOC","loading","error","update","catch","createContext","SwapiServiceProvider","Provider","SwapiServiceConsumer","Consumer","withSwapiService","Wrapped","swapiService","getPerson","getPersonImage","getPlanet","getPlanetImage","getStarships","getStarshipImage","ItemList","itemsLi","onClick","onItemSelected","id","SwapiService","getResourse","url","a","fetch","response","ok","Error","status","json","body","_transformPlanet","planet","_extractId","population","rotationPeriod","rotation_period","diameter","_transformPerson","person","birthYear","birth_year","eyeColor","eye_color","gender","hairColor","hair_color","height","mass","personSkin","skin_color","_transformStarShip","starShip","model","manufacturer","costCredits","cost_in_credits","length","passengers","crew","cargoCapacity","cargo_capacity","getAllPerson","result","results","getAllPlanets","getAllStarships","match","PersonList","PlanetList","StarshipList","Row","leftElement","rightElement","withRouter","history","push","element","params","PlanetPage","selectedItem","RandomPlanet","swapi","onError","err","onPlanetLoaded","updatePlanet","Math","floor","random","setInterval","updateInterval","hasData","spiner","content","errorMessage","defaultProps","PlanetViev","Fragment","App","value","path","component","PeoplePage","exact","StarshipPage","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.24cf6c63.chunk.js","sourcesContent":["import Header from './header';\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './header.scss';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <div className=\"header__logo\">Star DB</div>\r\n            <ul className=\"header__list\">\r\n                <li className=\"header__list-item\"><Link to=\"/people/\">People</Link></li>\r\n                <li className=\"header__list-item\"><Link to=\"/planet/\">Planets</Link></li>\r\n                <li className=\"header__list-item\"><Link to=\"/starship/\">Starships</Link></li>\r\n            </ul>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nimport './item-details.scss';\r\n\r\n// Компонент отображает данные персонажа с сервера - поля в теле\r\nconst Record = (props) => {\r\n    const { item, field, label } = props;\r\n\r\n    return (\r\n        <li className=\"list-group-item\">\r\n            <span className=\"term\">{label}</span>\r\n            <span>{item[field]}</span>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport { Record };\r\n\r\n// Компонент отображает данные персонажа с сервера - тело \r\nexport default class ItemDetails extends Component {\r\n    state = {\r\n        itemIdBody: null,\r\n        image: null,\r\n    };\r\n\r\n    componentDidMount() { // Отрисовывает данные персонажа если они были назначенны при старте\r\n        this.updateItemBody();\r\n    };\r\n\r\n    // Если будем использовать смену props || state необходимо условие проверки чтобы не создать петлю\r\n    componentDidUpdate(prevProps) {\r\n        //Обновляем - если \"ID из пропса\" не такой же как \"ID предыдущего пропса\" \r\n        //или\r\n        //Полученная функция получения е такая же как \"полученные данные предыдущего пропса\" \r\n\r\n        if (this.props.itemId !== prevProps.itemId || this.props.getData !== prevProps.getData) {\r\n            this.updateItemBody(); // SetState =>  componentDidUpdate => SetState =>  componentDidUpdate = БЕСКОНЕЧНОСТЬ\r\n        }\r\n    }\r\n\r\n    updateItemBody() { // функция для обновления выбранного персонажа\r\n        const { itemId, getData, getImageUrl } = this.props\r\n\r\n        if (!itemId) {  // если пользователь ничего не выбрал, в itemId будет null\r\n            return;  // не обновляем персонажа\r\n        }\r\n\r\n        // если пользователь кого-то выбрал, делаем запрос на сервер за данными по ID из пропса\r\n        getData(itemId).then(newItem => { // когда данные будут доступны получим newItem\r\n            this.setState({\r\n                itemIdBody: newItem, // присваиваем данные newItem стейту\r\n                image: getImageUrl(newItem) // возвращает картинку по заданому ID\r\n            });\r\n        });\r\n    };\r\n\r\n    render() {\r\n        // если не выбран не один персонаж == null\r\n        if (!this.state.itemIdBody) {\r\n            return <span>Выберите персонажа из списка</span>\r\n        }\r\n\r\n        return (\r\n            <div className=\"item-details card\" >\r\n                <img className=\"item-image\" src={this.state.image} alt=\"картинка элемента списка\" />\r\n\r\n                <div className=\"card-body\">\r\n                    <h4>{this.state.itemIdBody.name}</h4>\r\n                    <ul className=\"list-group list-group-flush\">\r\n                        {\r\n                            React.Children.map(this.props.children, (child) => {\r\n                                return React.cloneElement(child, {\r\n                                    item: this.state.itemIdBody\r\n                                });\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};","import React from \"react\";\r\n\r\nimport \"./spiner.scss\";\r\n\r\n// Визуальное отображения спиннер для загрузок\r\nconst Spiner = () => {\r\n    return (\r\n        <div className=\"spinner-wrap\">\r\n            <div className=\"spinner-body\">\r\n                <div></div>\r\n                <div></div>\r\n                <div><div></div></div>\r\n                <div><div></div></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Spiner;","import React from \"react\";\r\n\r\nimport \"./error-indicator.scss\";\r\n\r\n// Компонент \"Индикатор ошибки\" - визуализация ошибки\r\nconst ErrorIndicator = () => {\r\n    return (\r\n        <div className=\"error-indicator\">\r\n            <h2>404</h2>\r\n            <span>Неприятная ошибка</span>\r\n            <span>Но, мы все исправим, потом. . .</span>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ErrorIndicator;","import ErrorIndicator from \"./error-indicator\";\r\n\r\nexport default ErrorIndicator;","import React, { Component } from 'react';\r\nimport Spiner from '../spiner/spiner';\r\nimport ErrorIndicator from \"../error-indicator\";\r\n\r\n// HOC для работы с полученнием данных\r\n// Компонент-обертка - верет на себя некоторые обязанности/логику о которых не нужно заботить внутреннему компоненту\r\nconst withDataHOC = (ComponentView, getDataFunction) => {\r\n    return class extends Component {\r\n        state = {\r\n            dataHOC: [],\r\n            loading: false,\r\n            error: false,\r\n        };\r\n\r\n        componentDidMount() {\r\n            this.update() // обновляем состояниеЫ\r\n        };\r\n\r\n        componentDidUpdate(prevProps) {\r\n            if (this.props.getDataFunction !== prevProps.getDataFunction) {\r\n                this.update() // обновляем состояниеЫ\r\n            }\r\n        };\r\n\r\n        update() { // Логика работы с сетью - [1]\r\n            this.setState({\r\n                loading: true,\r\n                error: false,\r\n            });\r\n\r\n            getDataFunction()\r\n                .then((dataHOC) => { // Вызываем переданные с сервера данные\r\n                    this.setState({\r\n                        dataHOC: dataHOC,\r\n                        loading: false,\r\n                    });\r\n                })\r\n                .catch(() => {\r\n                    this.setState({\r\n                        error: true,\r\n                        loading: false,\r\n                    })\r\n                })\r\n        };\r\n\r\n\r\n        render() {\r\n            const { dataHOC } = this.state // Деструктурируем в переменные\r\n\r\n            if (this.state.loading) { // Логика отображения спиннера - [2]\r\n                return <Spiner />\r\n            };\r\n            if (this.state.error) {\r\n                return <ErrorIndicator />\r\n            }\r\n\r\n            return <ComponentView {...this.props} dataHOC={dataHOC} /> // передаем полученные свойства\r\n        }\r\n    }\r\n};\r\n\r\nexport default withDataHOC;","import React from 'react';\r\n\r\n// Использование\r\n//* Provider = Оборачивает часть приложения и передает контекст через value={Передаваемого Значение}\r\n// <Provider value={Передаваемого Значение}>\r\n// Тело компонентов для которых доступно {Передаваемого Значение}\r\n//</Provider >\r\n\r\n//* Consumer = Вызывает/получает переданный контекст через функцию\r\n//<Consumer> {\r\n// принимает функцию(Передаваемого Значение) => <Компонент нужно применить data={Передаваемого Значение} />\r\n//}</Consumer >\r\n\r\nconst { // Присваиваем Кричащие названия значений\r\n    Provider: SwapiServiceProvider, //* Provider = Оборачивает часть приложения\r\n    Consumer: SwapiServiceConsumer  //* Consumer = Вызывает/получает переданный контекст через функцию\r\n} = React.createContext();\r\n\r\nexport { SwapiServiceProvider, SwapiServiceConsumer };\r\n","import React from \"react\";\r\nimport { SwapiServiceConsumer } from '../swapi-service-context';\r\n\r\nconst withSwapiService = (Wrapped) => {\r\n\r\n    // swapiService - передается через CONTEXT API value={Provider}\r\n    return (props) => {\r\n        return (\r\n            <SwapiServiceConsumer>\r\n                {\r\n                    (swapiService) => {\r\n                        return <Wrapped {...props} swapiService={swapiService} />\r\n                    }\r\n                }\r\n            </SwapiServiceConsumer>\r\n        )\r\n    }\r\n};\r\n\r\nexport default withSwapiService;","import React from 'react';\r\nimport ItemDetails, { Record } from '../item-details/item-details';\r\nimport { withSwapiService } from \"../hoc-helpers/\";\r\n\r\nconst PersonDetails = ({ itemId, swapiService }) => {\r\n    return (\r\n        <ItemDetails\r\n            getData={swapiService.getPerson}\r\n            getImageUrl={swapiService.getPersonImage}\r\n            itemId={itemId}>\r\n\r\n            <Record field=\"gender\" label=\"Gender\" />\r\n            <Record field=\"eyeColor\" label=\"Eye Color\" />\r\n\r\n        </ItemDetails>\r\n    )\r\n};\r\n\r\nexport default withSwapiService(PersonDetails);","import React from 'react';\r\nimport ItemDetails, { Record } from '../item-details/item-details';\r\nimport { withSwapiService } from \"../hoc-helpers/\";\r\n\r\nconst PlanetDetails = ({ itemId, swapiService }) => {\r\n    return (\r\n        <ItemDetails\r\n            getData={swapiService.getPlanet}\r\n            getImageUrl={swapiService.getPlanetImage}\r\n            itemId={itemId}>\r\n\r\n            <Record field=\"population\" label=\"Population\" />\r\n            <Record field=\"rotationPeriod\" label=\"Rotation Period\" />\r\n            <Record field=\"diameter\" label=\"Diameter\" />\r\n\r\n        </ItemDetails>\r\n    )\r\n};\r\n\r\n\r\nexport default withSwapiService(PlanetDetails);","import React from 'react';\r\nimport ItemDetails, { Record } from '../item-details/item-details';\r\nimport { withSwapiService } from \"../hoc-helpers/\";\r\n\r\nconst StarshipDetails = ({ itemId, swapiService }) => {\r\n    return (\r\n        <ItemDetails\r\n            getData={swapiService.getStarships}\r\n            getImageUrl={swapiService.getStarshipImage}\r\n            itemId={itemId}>\r\n\r\n            <Record field=\"model\" label=\"Model\" />\r\n            <Record field=\"length\" label=\"Length\" />\r\n            <Record field=\"costCredits\" label=\"Credits\" />\r\n\r\n        </ItemDetails>\r\n\r\n    )\r\n};\r\n\r\nexport default withSwapiService(StarshipDetails);","import ItemList from './item-list';\r\n\r\nexport default ItemList;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './item-list.scss';\r\n\r\n// Часть отрисовки компонента\r\nconst ItemList = (props) => {\r\n    const itemsLi = props.dataHOC.map(item => { // передача данных из props\r\n\r\n        const label = props.children(item); // получаем снаружи функцию {(element) => `${element.name}`}\r\n\r\n        return (\r\n            <li className=\"list-group-item\"\r\n                key={item.id}\r\n                onClick={() => props.onItemSelected(item.id)}>\r\n                {label}\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <ul className=\"item-list list-group\" >\r\n            {itemsLi}\r\n        </ul>\r\n    );\r\n};\r\n\r\n// Описание/валидация получаемых свойст - props\r\nItemList.propTypes = {\r\n    onItemSelected: PropTypes.func.isRequired,\r\n    data: PropTypes.arrayOf(PropTypes.object),\r\n    children: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ItemList;","// Создаем класс для работы с сервером\r\nexport default class SwapiService {\r\n    getResourse = async (url) => { // метод получения/обработки результата\r\n        const response = await fetch(url); // получаем ответ - статус, url и т.д\r\n        // console.log(response);\r\n\r\n        if (!response.ok) { // Отображаем ошибку запроса\r\n            throw new Error(`Не удалось выполнить запрос по адресу ${url}, ошибка № ${response.status}`)\r\n        }\r\n\r\n        const body = await response.json(); // парсим полученный ответ в обьект\r\n        // console.log(body);\r\n        return body;\r\n    };\r\n\r\n    // ================  Трансформирование данных с API сервера в данные для приложения  ================\r\n\r\n    // Забираем id из url адреса, т.к. API не дает нам id\r\n    _extractId(item) {\r\n        const regularExpession = /\\/([0-9]*)\\/$/;\r\n        return item.url.match(regularExpession)[1];\r\n    };\r\n\r\n    //* + Изменяем правила наименования данных с сервера на локальные\r\n    //* + Вместо всех полей выбираем только те что нам нужны\r\n    _transformPlanet = (planet) => {\r\n        return {\r\n            id: this._extractId(planet),\r\n            name: planet.name,\r\n            population: planet.population,\r\n            rotationPeriod: planet.rotation_period,\r\n            diameter: planet.diameter\r\n        };\r\n    };\r\n\r\n    _transformPerson = (person) => {\r\n        return {\r\n            id: this._extractId(person),\r\n            birthYear: person.birth_year,\r\n            eyeColor: person.eye_color,\r\n            gender: person.gender,\r\n            hairColor: person.hair_color,\r\n            height: person.height,\r\n            mass: person.mass,\r\n            name: person.name,\r\n            personSkin: person.skin_color,\r\n        };\r\n    }\r\n\r\n    _transformStarShip = (starShip) => {\r\n        return {\r\n            id: this._extractId(starShip),\r\n            model: starShip.model,\r\n            name: starShip.name,\r\n            manufacturer: starShip.manufacturer,\r\n            costCredits: starShip.cost_in_credits,\r\n            length: starShip.length,\r\n            passengers: starShip.passengers,\r\n            crew: starShip.crew,\r\n            cargoCapacity: starShip.cargo_capacity,\r\n        };\r\n    }\r\n\r\n    // ================  Запрос изображений  ================\r\n\r\n    getPersonImage = ({ id }) => {\r\n        return `https://starwars-visualguide.com/assets/img/characters/${id}.jpg`\r\n    }\r\n\r\n    getStarshipImage = ({ id }) => {\r\n        return `https://starwars-visualguide.com/assets/img/starships/${id}.jpg`\r\n    }\r\n\r\n    getPlanetImage = ({ id }) => {\r\n        return `https://starwars-visualguide.com/assets/img/planets/${id}.jpg`\r\n    }\r\n\r\n    // ================  Запрос персонажей  ================\r\n\r\n    getAllPerson = async () => { // Получаем ответ от сервера\r\n        const result = await this.getResourse(\"https://swapi.dev/api/people/\")\r\n        return result.results.map(this._transformPerson); // получаем массив обьектов и возвращаем на его основе массив с изменеными данными\r\n    }\r\n\r\n    getPerson = async (id) => {\r\n        const result = await this.getResourse(`https://swapi.dev/api/people/${id}`)\r\n        return this._transformPerson(result) // получаем обьект c измененными даннымиы\r\n    }\r\n\r\n    // ================  Запрос планет  ================\r\n\r\n    getAllPlanets = async () => { // Получаем ответ от сервера\r\n        const result = await this.getResourse(\"https://swapi.dev/api/planets/\")\r\n        return result.results.map(this._transformPlanet);\r\n    }\r\n\r\n    getPlanet = async (id) => {\r\n        const result = await this.getResourse(`https://swapi.dev/api/planets/${id}`)\r\n        return this._transformPlanet(result)\r\n    }\r\n\r\n    // ================  Запрос кораблей  ================\r\n\r\n    getAllStarships = async () => { // Получаем ответ от сервера\r\n        const result = await this.getResourse(\"https://swapi.dev/api/starships/\")\r\n        return result.results.map(this._transformStarShip);\r\n    }\r\n\r\n    getStarships = async (id) => {\r\n        const result = await this.getResourse(`https://swapi.dev/api/starships/${id}`)\r\n        return this._transformStarShip(result);\r\n    }\r\n}\r\n\r\n // ================  Пример обращения  ================\r\n\r\n// const swapi = new SwapiService();\r\n\r\n// // swapi.getAllStarships()\r\n// //     .then((body) => body.forEach(element => console.log(element.name)));\r\n\r\n// swapi.getStarships(5).then((el) => console.log(el))","import { withDataHOC } from \"../hoc-helpers\";\r\nimport ItemList from '../item-list';\r\nimport SwapiService from \"../../services/swapi-service\";\r\n\r\nconst swapiService = new SwapiService()\r\n\r\n// Создаем компоненты через обертку HOC = withНазвание(передаваемыйКомпонент, параметр-Данные)\r\nconst PersonList = withDataHOC(ItemList, swapiService.getAllPerson);\r\nconst PlanetList = withDataHOC(ItemList, swapiService.getAllPlanets);\r\nconst StarshipList = withDataHOC(ItemList, swapiService.getAllStarships);\r\n\r\nexport { PersonList, PlanetList, StarshipList };","import Row from './row';\r\n\r\nexport default Row;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './row.scss';\r\n\r\n// Компонент обертка для деления на 2 стороны\r\nconst Row = ({ leftElement, rightElement }) => { // Деструктурируем поля получаемые из props\r\n    return (\r\n        <div className=\"row mb2\">\r\n            <div className=\"col-md-6\">\r\n                {leftElement}\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n                {rightElement}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nRow.propTypes = {\r\n    leftElement: PropTypes.node,\r\n    rightElement: PropTypes.node,\r\n};\r\n\r\nexport default Row;","import React from 'react';\r\nimport { withRouter } from 'react-router';\r\nimport { PersonList, PersonDetails } from '../sw-components';\r\nimport Row from '../row';\r\n\r\nconst PeoplePage = (props) => {\r\n    return (\r\n        <Row\r\n            leftElement={\r\n                <PersonList onItemSelected={(id) => { props.history.push(id) }} >\r\n                    {(element) => `${element.name} `}\r\n                </PersonList>\r\n            }\r\n            rightElement={<PersonDetails itemId={props.match.params.id} />}\r\n        />\r\n    )\r\n};\r\n\r\nexport default withRouter(PeoplePage);","import React, { Component } from 'react';\r\nimport { PlanetList, PlanetDetails } from '../sw-components';\r\nimport Row from '../row';\r\n\r\nexport default class PlanetPage extends Component {\r\n\r\n    state = {\r\n        selectedItem: null\r\n    };\r\n\r\n    onItemSelected = (selectedItem) => {\r\n        this.setState({ selectedItem: selectedItem })\r\n    };\r\n    render() {\r\n        return (\r\n            <Row\r\n                leftElement={\r\n                    <PlanetList onItemSelected={this.onItemSelected} >\r\n                        {(element) => `${element.name}`}\r\n                    </PlanetList>\r\n                }\r\n                rightElement={<PlanetDetails itemId={this.state.selectedItem} />}\r\n            />\r\n        )\r\n    }\r\n};","import React from 'react';\r\nimport { withRouter } from 'react-router';\r\nimport { StarshipList } from '../sw-components';\r\n\r\nconst StarshipPage = (props) => {\r\n    return (\r\n        <StarshipList onItemSelected={(itemId) => props.history.push(itemId)}>\r\n            {(element) => `${element.name} `}\r\n        </StarshipList>\r\n    )\r\n};\r\n\r\nexport default withRouter(StarshipPage);","import React, { Component } from 'react';\r\nimport SwapiService from \"../../services/swapi-service\";\r\nimport Spiner from '../spiner/spiner';\r\nimport ErrorIndicator from \"../error-indicator/error-indicator\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './random-planet.scss';\r\n\r\n// Компонент для работы с состоянием и логикой\r\nexport default class RandomPlanet extends Component {\r\n    swapi = new SwapiService();\r\n    state = {\r\n        planet: {}, // поле с данными обьекта получаемого с сервера\r\n        loading: true, // флаг показа спиннера\r\n        error: false // флаг ошибки\r\n    };\r\n\r\n    static defaultProps = { // props по-умолчанию\r\n        updateInterval: 10000,\r\n    };\r\n\r\n    static propTypes = {\r\n        updateInterval: PropTypes.number\r\n    };\r\n\r\n    // отправляет запросы/срабатывает после добавления элементов в DOM\r\n    componentDidMount() {// в момент создания компонента отправляем запрос на сервер\r\n        this.updatePlanet(); // получаемый ответ отображаем на странице через смену state\r\n        setInterval(this.updatePlanet, this.props.updateInterval);\r\n    }\r\n\r\n    onError = (err) => {\r\n        this.setState({\r\n            error: true,\r\n            loading: false, // загрузка закончилась если мы получили ошибку\r\n        })\r\n    };\r\n\r\n    onPlanetLoaded = (planet) => { // стрелка для работы с значением this\r\n        this.setState({\r\n            planet, // передаем в state обьект planet который приходит из this.swapi.getPlanet\r\n            loading: false // снимаем флаг спинера в state как только данные готовы\r\n        })\r\n    };\r\n\r\n    updatePlanet = () => {\r\n        // console.log(\"обновление\")\r\n        // Генерация случайной планеты через числа\r\n        const itemId = Math.floor(Math.random() * 17) + 2;\r\n        this.swapi.getPlanet(itemId) // получаем планету по передаваемому параметру ID\r\n            .then(this.onPlanetLoaded) // дожидаемся ответа и устанавливаем новый стейт из параметров result от сервера\r\n            .catch(this.onError);\r\n    };\r\n\r\n    render() {  // null В JSX разметке игнорируется\r\n        // у нас есть данные только тогда когда(нет не загрузки || не ошибки );\r\n        const hasData = !(this.state.loading || this.state.error);\r\n        // если мы загружаемася(true по умолчанию) : null(ничего)\r\n        const spiner = this.state.loading ? <Spiner /> : null;\r\n        // если не загружаемся/значит данные пришли показывает компонент с данными : null(ничего) - не отображает ничего\r\n        const content = hasData ? <PlanetViev planet={this.state.planet} /> : null;\r\n        // если есть ошибка то показываем ее\r\n        const errorMessage = this.state.error ? <ErrorIndicator /> : null;\r\n        return (\r\n            <div className=\"random-planet card\" >\r\n                {errorMessage}\r\n                {spiner}\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\n// Компонент для отображения загруженых/полученных данных\r\nconst PlanetViev = ({ planet }) => {\r\n    return (\r\n        <React.Fragment>\r\n            <img className=\"random-planet-image\" src={`https://starwars-visualguide.com/assets/img/planets/${planet.id}.jpg`} alt=\"planet\" />\r\n            <div className=\"card-body\">\r\n                <h4>{planet.name}</h4>\r\n                <ul className=\"list-group list-group-flush\">\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Population</span>\r\n                        <span>{planet.population}</span>\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Rotation Period</span>\r\n                        <span>{planet.rotationPeriod}</span>\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Diameter</span>\r\n                        <span>{planet.diameter}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n};","import RandomPlanet from \"./random-planet\";\r\n\r\nexport default RandomPlanet;","import App from './app-wrap';\r\n\r\nexport default App;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\r\n\r\nimport Header from '../header';\r\nimport { PeoplePage } from '../pages'\r\nimport { PlanetPage } from '../pages'\r\nimport { StarshipPage } from '../pages'\r\nimport RandomPlanet from '../random-planet'\r\n\r\nimport SwapiService from \"../../services/swapi-service\";\r\nimport { SwapiServiceProvider } from '../swapi-service-context';\r\n\r\nimport './bootstrap.min.css';\r\nimport './app-wrap.scss';\r\nimport { StarshipDetails } from '../sw-components';\r\n\r\n\r\n// Компонент \"Обертка приложения\" \r\nexport default class App extends Component {\r\n    state = {\r\n        swapiService: new SwapiService(), // источник данных как состояние - удобно для смены источника или тестов\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <SwapiServiceProvider value={this.state.swapiService}>\r\n                <Router>\r\n                    <div className=\"section-outer\">\r\n                        <Header />\r\n                        <RandomPlanet updateInterval={5000} />\r\n\r\n                        <Switch>\r\n                            <Route path=\"/people/:id?\" component={PeoplePage} />\r\n                            <Route path=\"/planet\" component={PlanetPage} />\r\n                            <Route path=\"/starship\" exact component={StarshipPage} />\r\n                            <Route path=\"/starship/:id\" render={\r\n                                ({ match }) => <StarshipDetails itemId={match.params.id} />\r\n                            } />\r\n                            <Redirect to='./planet' />\r\n                            {/* <Route render={() => <h2>404 Page not found</h2>} /> */}\r\n                        </Switch>\r\n                    </div>\r\n                </Router>\r\n            </SwapiServiceProvider>\r\n        );\r\n    }\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app-wrap';\r\n\r\nReactDOM.render(<App />,\r\n    document.getElementById('root'));"],"sourceRoot":""}